on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      working-directory:
        required: false
        type: string
        default: '.'
      platforms:
        required: false
        type: string
        default: 'linux/amd64'
      registry-host:
        required: true
        type: string
    secrets:
      registry-user:
        required: true
      registry-password:
        required: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v3
    -
      name: Buildx Parameter Derivation
      id: parameter-derivation
      shell: bash
      run: |
        # build image tag
        TAG=$REF_NAME
        if [[ "$TAG" == "$DEFAULT_BRANCH" ]]; then
          TAG=latest
        fi
        TAG=$IMAGE_NAME:$TAG

        # determine if we should push the image
        PUSH=false
        if [[ "$EVENT_NAME" == "push" ]]; then
          if [[ "$REF_NAME" == "$DEFAULT_BRANCH" ]] || [[ $REF_TYPE == "tag" ]]; then
            PUSH=true
          fi
        fi

        ACTION_NAME=$(echo $WF_REF | cut -d/ -f1-2)
        ACTION_REF=$(echo $WF_REF | cut -d@ -f2)
        ACTION=$ACTION_NAME@$ACTION_REF

        # write outputs
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        echo "push=$PUSH" >> "$GITHUB_OUTPUT"
        echo "action=$ACTION" >> "$GITHUB_OUTPUT"
      env:
        REF_NAME: ${{ github.ref_name }}
        REF_TYPE: ${{ github.ref_type }}
        EVENT_NAME: ${{ github.event_name == 'push' }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        IMAGE_NAME: ${{ inputs.image-name }}
        WF_REF: ${{ github.workflow_ref }}
    -
      name: Build Test Image
      uses: ${{ steps.parameter-derivation.outputs.action }}
      with:
        working-directory: ${{ inputs.working-directory }}
        tag-name: ${{ steps.parameter-derivation.outputs.tag }}
        push: ${{ steps.parameter-derivation.outputs.push }}
        docker-registry: ${{ inputs.registry-host }}
        docker-user: ${{ secrets.registry-user }}
        docker-password: ${{ secrets.registry-password }}
